[{"F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\App.tsx":"1","F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\component\\TodoItem.tsx":"2","F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\component\\Footer.tsx":"3","F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\component\\AddNewModal.tsx":"4","F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\component\\TodoList.tsx":"5","F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\index.tsx":"6","F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\reportWebVitals.ts":"7","F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\constants\\Config.tsx":"8","F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\api\\index.tsx":"9","F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\component\\Header.tsx":"10"},{"size":7982,"mtime":1609832810032,"results":"11","hashOfConfig":"12"},{"size":3504,"mtime":1609836689458,"results":"13","hashOfConfig":"12"},{"size":1537,"mtime":1609820471681,"results":"14","hashOfConfig":"12"},{"size":4555,"mtime":1609838866056,"results":"15","hashOfConfig":"12"},{"size":1077,"mtime":1609758384538,"results":"16","hashOfConfig":"12"},{"size":500,"mtime":1609731283746,"results":"17","hashOfConfig":"12"},{"size":425,"mtime":1609731283746,"results":"18","hashOfConfig":"12"},{"size":47,"mtime":1609753491125,"results":"19","hashOfConfig":"12"},{"size":428,"mtime":1609757983702,"results":"20","hashOfConfig":"12"},{"size":2220,"mtime":1609832827444,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"x335hs",{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\App.tsx",["48","49","50","51","52"],"import React, { useState, useEffect } from 'react';\nimport { Collapse, Button, CardBody, Card } from 'reactstrap';\nimport moment from 'moment';\n\nimport './App.css';\nimport AddNewModal from './component/AddNewModal';\nimport TodoList from './component/TodoList';\nimport Footer from './component/Footer';\nimport { ITodoListProps, ITodosList } from './todointerface/ITodo';\nimport callApi from './api/index';\nimport Header from './component/Header';\n\nconst App = () => {\n\n    const [isDisplayForm, setIsDisplayForm] = useState<boolean>(false);\n    const [todosList, setTodosList] = useState<ITodosList[]>([]);\n    const [taskEditing, setTaskEditing] = useState<ITodosList>({\n          id: 0,\n          text: '',\n          isCompleted: false,\n          status: 'Lower',\n          date: moment().format('DD-MM-yyyy hh:mm'),\n    });\n    const [checkTimeLate, setCheckTimeLate] = useState<boolean>(false);\n    const [status, setStatus] = useState<string>('ALL');\n    const [numberItem, setNumberItem] = useState<number>(todosList.length);\n    const [isOpen, setIsOpen] = useState<boolean>(true);\n    const [textSearch, setTextSearch] = useState<string>('');\n\n    useEffect(() => {\n      callApi('getTodosList', 'GET').then((res: any) => {\n        setTodosList(res.data.data);\n      })\n    }, [])\n\n    useEffect(() => {\n        setNumberItem(filterByStatus(todosList, status).length)\n    })\n\n    const onToggleForm = (todo: ITodosList) => {\n        if(isDisplayForm && taskEditing !== null) {\n            setIsDisplayForm(true);\n        }else {\n            setIsDisplayForm(!isDisplayForm);\n        }\n        setTaskEditing(todo);\n    }\n\n    const onCloseForm = () => {\n        setIsDisplayForm(false)\n    }\n\n    const onShowForm = () => {\n        setIsDisplayForm(true);\n    }\n    const findIndex = (id: number): number => {\n        var result = -1;\n        for(var i = 0; i< todosList.length; i++){\n            if(todosList[i].id === id){\n                result = i; \n            }\n        }\n        return result;\n    }\n    const handleAddNewModal = (todo: ITodosList) => {\n        const list = todosList;\n        const index = findIndex(todo.id);\n        if(index !== -1) {\n            list.splice(index, 1, todo);\n            setTodosList(list);\n        }else {\n            const todos = todosList.concat({\n                id: todo.id,\n                text: todo.text,\n                isCompleted: todo.isCompleted,\n                status: todo.status,\n                date: todo.date\n            });\n            setTodosList(todos);\n        }    \n        setTaskEditing({\n          id: 0,\n          text: '',\n          isCompleted: false,\n          status: todo.status,\n          date: moment().format('DD-MM-yyyy HH:mm'),\n        });  \n    }\n\n    const handleDelete = (id: number) => {\n        const array = todosList.filter(t => t.id !== id);\n        setTodosList(array);    \n    }\n\n\n    const handleEditTodo = (todo: ITodosList, index: number) => {\n        var taskEditing = todosList[index];\n        console.log(\"taskEditing: \", taskEditing);\n        setTaskEditing(taskEditing);\n        onShowForm();\n    }\n\n    const handleCheckbox = (id: number) => {\n        const updateList = todosList.map(todo => todo.id === id ? ({ ...todo, isCompleted: !todo.isCompleted}) : todo);\n        setTodosList(updateList);\n    }\n\n    const setStatusFilter = (status: string) => {\n        setStatus(status);\n        if(status === 'ACTIVE') {\n            var listActive = todosList.filter(todo => todo.isCompleted === false);\n            setNumberItem(listActive.length);\n        }\n        if(status === 'COMPLETED') {\n            var listCompleted = todosList.filter(todo => todo.isCompleted === true);\n            setNumberItem(listCompleted.length);\n        }\n    }\n\n    const filterByStatus = (todos: ITodosList[], status: string) => {\n        var result = [...todos];\n        switch (status) {\n          case 'ACTIVE':\n            result =  todos.filter((todo: ITodosList) => !todo.isCompleted);\n            break;\n          case 'COMPLETED':\n            result =  todos.filter((todo: ITodosList) => todo.isCompleted);\n            break;\n        case 'SEARCH':\n            result = todos.filter((todo: ITodosList) => todo.text.toLowerCase().includes(textSearch.toLowerCase()));\n            break;\n          default:\n            result = todos;\n            break\n        }\n        return result;\n    }\n\n    const toggleShowAll = () => {\n        setIsOpen(!isOpen);\n    }\n\n    const onSearch = (text: string, status: string) => {\n        setTextSearch(text);\n        setStatus(status);\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"text-center\">\n                <h1>Todos List</h1>\n                <hr/>\n            </div>\n            <div className=\"row\">\n                <div className={ isDisplayForm ? 'col-xs-4 col-sm-4 col-md-4 col-lg-4' : ''}>\n                    { isDisplayForm ? <AddNewModal \n                                        handleAddNewModal={handleAddNewModal}\n                                        onCloseForm={onCloseForm}\n                                        editTodo={taskEditing}/> : ''}\n                </div>\n                <div className={ isDisplayForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' :\n                                'col-xs-12 col-sm-12 col-md-12 col-lg-12'}>\n                        <Header \n                            isOpen={isOpen}\n                            isDisplayForm={isDisplayForm}\n                            toggleShowAll={toggleShowAll}\n                            onToggleForm={onToggleForm}\n                            onSearch={onSearch}\n                        />\n                    {/* <button \n                        className={ isDisplayForm ? 'btn btn-primary inline-button' : 'btn btn-primary arror-colspan inline-button' } \n                        onClick={toggleShowAll}\n                        >\n                            {isOpen ? <span className=\"glyphicon glyphicon-arrow-up\"></span> : <span className=\"glyphicon glyphicon-arrow-down\"></span> }\n                            \n                    </button>\n                    <button \n                        type=\"button\" \n                        className={ isDisplayForm ? 'btn btn-primary inline-button' : 'btn btn-primary  btn-add-display-form-true inline-button'}\n                        onClick={ onToggleForm }>\n                        <span className=\"fa fa-plus mr-5\"></span>Add New Task\n                    </button>\n                    <form className={ isDisplayForm ? 'form-inline-display-form-true my-2 my-lg-0 form-inline' : 'form-inline-display-form-false my-2 my-lg-0 form-inline'}>\n                        <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n                    </form> */}\n                    <Collapse isOpen={isOpen}>\n                        <Card>\n                            <CardBody>\n                                <TodoList\n                                    todosList={filterByStatus(todosList, status)}\n                                    isDisplayForm={isDisplayForm}\n                                    onDelete={handleDelete}\n                                    onEditTodo={handleEditTodo}\n                                    onCheckbox={handleCheckbox}\n                                />\n                            </CardBody>\n                        </Card>\n                    </Collapse>\n                    <Footer \n                        isDisplayForm={isDisplayForm}\n                        status={status}\n                        numberItem={numberItem}\n                        // todosList={todosList}\n                        setStatusFilter={setStatusFilter}\n                        isOpen={isOpen}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\component\\TodoItem.tsx",["53","54","55","56","57"],"import React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport { ITodoItemProps, ITodosList } from './../todointerface/ITodo';\r\n\r\nconst TodoItem = (props: ITodoItemProps) => {\r\n\r\n    const { isDisplayForm, index, todo, onDelete, onEditTodo, onCheckbox } = props;\r\n    const [checkStatus, setCheckStatus] = useState<string>('');\r\n    const [timeLate, setTimeLate] = useState<string>('');\r\n    const [timeDeadline, setTimeDeadline] = useState<number>(new Date(moment(moment(todo.date).format('DD-MM-yyyy HH:mm')).toString()).getTime());\r\n    const [today, setToday] = useState<number>(new Date().getTime() + 15 * 60 * 1000);\r\n\r\n    useEffect(() => {\r\n        var result = 'label label-primary ';\r\n        if (todo.status === 'Medium') {\r\n            result =  'label label-success ';\r\n        }\r\n        if (todo.status === 'Hight') {\r\n            result = 'label label-danger ';\r\n        }\r\n        setCheckStatus(result);\r\n    })\r\n\r\n    useEffect(() => {\r\n        var result = ''\r\n        if(timeDeadline < today) {\r\n            result = 'time-late';\r\n        }\r\n        setTimeLate(result);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(timeDeadline > today){\r\n            setTimeout(function() {\r\n                setTimeLate('time-late');\r\n            }, timeDeadline - today);\r\n        }\r\n    }, [])\r\n\r\n    const handleDelete = (id: number) => {\r\n        const r = window.confirm(\"Do you want to delete: \" + todo.text + \" ?\"); \r\n        if(r === true){\r\n            onDelete(todo.id);\r\n        }\r\n    }\r\n\r\n    const handleEditTodo = (td: ITodosList, idx: number) => {\r\n        onEditTodo(td, idx);\r\n    }\r\n    \r\n    const handleCheckbox = (id: number) => {\r\n        onCheckbox(id);\r\n    }\r\n\r\n    return (\r\n        <li className={`${isDisplayForm ? '' : 'displayform-true '} ${timeLate} ${todo.isCompleted ? '' : ' textDecoration'}`}>\r\n            <input \r\n                className=\"input-chexbox\"\r\n                type=\"checkbox\" \r\n                checked={todo.isCompleted}\r\n                onClick={() => handleCheckbox(todo.id)}\r\n                onChange={()=>{}}\r\n                />\r\n            <label className={`${todo.isCompleted ? 'content' : 'content textDecoration'}`}>\r\n                <div className=\"Task__time\">\r\n                    <i className=\"far fa-calendar-alt\"></i>&nbsp;\r\n                    {todo.date}\r\n                </div>\r\n                <p className=\"text-todo\">{todo.text}</p>\r\n            </label>\r\n            <span \r\n                className={`${checkStatus} ${ isDisplayForm ? 'span-display-form-true-status' : 'span-display-form-false-status'}`}\r\n                >\r\n                            <i className=\"bi bi-chevron-double-up\">{todo.status}</i>\r\n            </span>\r\n            <button \r\n                type=\"button\" \r\n                className={ isDisplayForm ? 'btn btn-warning btn-display-form-true-edit' : 'btn btn-warning btn-display-form-false-edit'}\r\n                onClick={() => handleEditTodo(todo, index)}>\r\n                    <span className=\"glyphicon glyphicon-pencil mr-5\"></span> Edit\r\n            </button>\r\n            <button \r\n                type=\"button\" \r\n                className={ isDisplayForm ? 'btn btn-danger btn-display-form-true-delete' : 'btn btn-danger btn-display-form-false-delete'}\r\n                onClick={() => handleDelete(todo.id)}>\r\n                     <span className=\"fa fa-trash mr-5\"></span> Delete\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default TodoItem;","F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\component\\Footer.tsx",["58","59","60","61","62"],"import React, { useState, useEffect } from 'react';\r\nimport { IFooterProps } from './../todointerface/ITodo';\r\n\r\nconst Footer = (props: IFooterProps) => {\r\n\r\n    const { isDisplayForm, setStatusFilter, status, numberItem, isOpen } = props;\r\n    const [isActive, setIsActive] = useState<string>('ALL');\r\n\r\n    const handlCheckAll = (sts: string) => {\r\n        setStatusFilter(sts);\r\n        setIsActive(\"ALL\");\r\n    }\r\n\r\n    const handleCheckActive = (sts: string) => {\r\n        setStatusFilter(sts);\r\n        setIsActive(\"ACTIVE\");\r\n    }\r\n\r\n    const handleCheckComplete = (sts: string) => {\r\n        setStatusFilter(sts);\r\n        setIsActive(\"ACTIVE\");\r\n    }\r\n    return (\r\n        <li className={`${ isDisplayForm ? 'footer ' : 'displayform-true footer '} ${isOpen ? '' : 'collspan-isOpen-true'}`}>\r\n            <span className=\"todo-count\">\r\n                <strong>{numberItem}</strong>\r\n                <span> </span>\r\n                <span>items</span>\r\n                <span> left</span>\r\n            </span>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;\r\n            <a><span className={status === 'ALL' ? 'active': ''} onClick={() => handlCheckAll(\"ALL\")}>All</span></a>&emsp;&emsp;\r\n            <a><span className={status === 'ACTIVE' ? 'active': ''} onClick={() => handleCheckActive(\"ACTIVE\")}>Active</span></a>&emsp;&emsp;\r\n            <a><span className={status === 'COMPLETED' ? 'active': ''} onClick={() => handleCheckComplete(\"COMPLETED\")}>Complete</span></a>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Footer;","F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\component\\AddNewModal.tsx",["63","64"],"import React, { useState, useEffect } from 'react';\r\nimport DatePicker from 'react-datetime';\r\nimport moment from 'moment';\r\nimport 'react-datetime/css/react-datetime.css';\r\nimport { IAddNewModalProps } from './../todointerface/ITodo';\r\n\r\nconst AddNewModal = (props: IAddNewModalProps) => {\r\n\r\n    const { onCloseForm, handleAddNewModal, editTodo } = props;\r\n\r\n    const [dt, setDt] = useState<any>(moment());\r\n    const [text, setText] = useState<string>('');\r\n    const [status, setStatus] = useState<string>('Lower');\r\n    const [id, setId] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n        if(editTodo){\r\n            setId(editTodo.id);\r\n            setText(editTodo.text);\r\n            setStatus(editTodo.status);\r\n            setDt(editTodo.date);\r\n        };\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(editTodo){\r\n            setId(editTodo.id);\r\n            setText(editTodo.text);\r\n            setStatus(editTodo.status);\r\n            setDt(editTodo.date);\r\n        }else {\r\n            setId(0);\r\n            setText('');\r\n            setStatus('Lower');\r\n            setDt(dt);\r\n        }\r\n    }, [editTodo])\r\n\r\n    const handleCloseForm = () => {\r\n        onCloseForm();\r\n    }\r\n\r\n    const onSubmit = (e: any) => {\r\n        e.preventDefault();\r\n        var datetime = '';\r\n        if(editTodo){\r\n            if(editTodo.date === dt) {\r\n                datetime = dt;\r\n            }else {\r\n                datetime = dt.format('DD-MM-yyyy HH:mm');\r\n            }\r\n        }else {\r\n            if((typeof dt) === 'string') {\r\n                datetime = dt;\r\n            }else {\r\n                datetime = dt.format('DD-MM-yyyy HH:mm');\r\n            }\r\n        }\r\n        if(text !== ''){\r\n            handleAddNewModal({\r\n                id: editTodo.id !== 0 ? editTodo.id : (new Date().valueOf()),\r\n                text,\r\n                isCompleted: editTodo ? editTodo.isCompleted : false,\r\n                status,\r\n                date: datetime\r\n            });\r\n        }\r\n        setText('');\r\n        setStatus('Lower');\r\n    }\r\n\r\n    const onChangeStatus = (event: any) => {\r\n        setStatus(event.target.value);\r\n    }\r\n\r\n    const handleCancle = () => {\r\n        setText('');\r\n        setStatus('Lower');\r\n    }\r\n\r\n    return (\r\n        <div className=\"panel panel-warning\">\r\n            <div className=\"panel-heading\">\r\n            <h3 className=\"panel-title\">{ id !== 0 ? \"Edit Todo List\" : \"Add Todo List\" }</h3>\r\n                <span \r\n                    className=\"fa fa-times-circle text-right\"\r\n                    onClick={ handleCloseForm }>\r\n                </span>\r\n            </div>\r\n            <div className=\"panel-body\">\r\n                <form onSubmit={onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label>Name :</label>\r\n                        <input\r\n                            required\r\n                            value={text}\r\n                            type=\"text\" \r\n                            className=\"form-control\"\r\n                            onChange={ (e) => setText(e.target.value)} />\r\n                    </div>\r\n                    <label>Status</label>\r\n                    <select \r\n                        value={status}\r\n                        className=\"form-control\" \r\n                        // required=\"required\"\r\n                        onChange={onChangeStatus}>\r\n                            <option value=\"Lower\">Lower</option>\r\n                            <option value=\"Medium\">Medium</option>\r\n                            <option value=\"Hight\">Hight</option>\r\n                    </select>\r\n                    <br/>\r\n                    <label>Date</label>\r\n                    <DatePicker\r\n                        inputProps={{\r\n                        style: { width: 325 }\r\n                        }}\r\n                        value={dt}\r\n                        dateFormat=\"DD-MM-yyyy\"\r\n                        timeFormat=\"HH:mm\"\r\n                        onChange={val => setDt(val)}\r\n                    /> <br />\r\n                    {/* <div><b>Date:</b> {dt.format('DD-MM-YYYY hh:mm A')}</div> */}\r\n                    <div className=\"text-center\">\r\n                        <button type=\"submit\" className=\"btn btn-warning\">{ id !== 0 ? \"Edit\" : \"Add\" }</button>&nbsp;\r\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={handleCancle}>Cancel</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNewModal;","F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\component\\TodoList.tsx",[],"F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\index.tsx",[],["65","66"],"F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\reportWebVitals.ts",[],"F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\constants\\Config.tsx",[],"F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\api\\index.tsx",["67"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport * as Config from '../constants/Config';\r\nimport { ITodosList } from '../todointerface/ITodo'\r\n\r\nconst callApi = (endpoint: any, method: any, body?: ITodosList) => {\r\n    return axios({\r\n        method: method,\r\n        url: `${Config.API_URL}/${endpoint}`,\r\n        data: body\r\n    }).catch(err => {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nexport default callApi;","F:\\THUCTAP\\REACTJS\\todo-list-typescript\\src\\component\\Header.tsx",["68"],{"ruleId":"69","severity":1,"message":"70","line":2,"column":20,"nodeType":"71","messageId":"72","endLine":2,"endColumn":26},{"ruleId":"69","severity":1,"message":"73","line":9,"column":10,"nodeType":"71","messageId":"72","endLine":9,"endColumn":24},{"ruleId":"69","severity":1,"message":"74","line":24,"column":12,"nodeType":"71","messageId":"72","endLine":24,"endColumn":25},{"ruleId":"69","severity":1,"message":"75","line":24,"column":27,"nodeType":"71","messageId":"72","endLine":24,"endColumn":43},{"ruleId":"76","severity":1,"message":"77","line":36,"column":5,"nodeType":"71","endLine":36,"endColumn":14,"suggestions":"78"},{"ruleId":"69","severity":1,"message":"79","line":10,"column":26,"nodeType":"71","messageId":"72","endLine":10,"endColumn":41},{"ruleId":"69","severity":1,"message":"80","line":11,"column":19,"nodeType":"71","messageId":"72","endLine":11,"endColumn":27},{"ruleId":"76","severity":1,"message":"81","line":13,"column":5,"nodeType":"71","endLine":13,"endColumn":14,"suggestions":"82"},{"ruleId":"76","severity":1,"message":"83","line":30,"column":8,"nodeType":"84","endLine":30,"endColumn":10,"suggestions":"85"},{"ruleId":"76","severity":1,"message":"83","line":38,"column":8,"nodeType":"84","endLine":38,"endColumn":10,"suggestions":"86"},{"ruleId":"69","severity":1,"message":"87","line":1,"column":27,"nodeType":"71","messageId":"72","endLine":1,"endColumn":36},{"ruleId":"69","severity":1,"message":"88","line":7,"column":12,"nodeType":"71","messageId":"72","endLine":7,"endColumn":20},{"ruleId":"89","severity":1,"message":"90","line":31,"column":13,"nodeType":"91","endLine":31,"endColumn":16},{"ruleId":"89","severity":1,"message":"90","line":32,"column":13,"nodeType":"91","endLine":32,"endColumn":16},{"ruleId":"89","severity":1,"message":"90","line":33,"column":13,"nodeType":"91","endLine":33,"endColumn":16},{"ruleId":"76","severity":1,"message":"92","line":23,"column":8,"nodeType":"84","endLine":23,"endColumn":10,"suggestions":"93"},{"ruleId":"76","severity":1,"message":"94","line":37,"column":8,"nodeType":"84","endLine":37,"endColumn":18,"suggestions":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"69","severity":1,"message":"100","line":1,"column":8,"nodeType":"71","messageId":"72","endLine":1,"endColumn":13},{"ruleId":"69","severity":1,"message":"101","line":8,"column":20,"nodeType":"71","messageId":"72","endLine":8,"endColumn":29},"@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'ITodoListProps' is defined but never used.","'checkTimeLate' is assigned a value but never used.","'setCheckTimeLate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setNumberItem'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [filterByStatus, todosList, status] as a second argument to the useEffect Hook.",["102"],"'setTimeDeadline' is assigned a value but never used.","'setToday' is assigned a value but never used.","React Hook useEffect contains a call to 'setCheckStatus'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [todo.status] as a second argument to the useEffect Hook.",["103"],"React Hook useEffect has missing dependencies: 'timeDeadline' and 'today'. Either include them or remove the dependency array.","ArrayExpression",["104"],["105"],"'useEffect' is defined but never used.","'isActive' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has a missing dependency: 'editTodo'. Either include it or remove the dependency array.",["106"],"React Hook useEffect has a missing dependency: 'dt'. Either include it or remove the dependency array. You can also do a functional update 'setDt(d => ...)' if you only need 'dt' in the 'setDt' call.",["107"],"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"'React' is defined but never used.","'setStatus' is assigned a value but never used.",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"114","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"no-global-assign","no-unsafe-negation","Add dependencies array: [filterByStatus, todosList, status]",{"range":"121","text":"122"},"Add dependencies array: [todo.status]",{"range":"123","text":"124"},"Update the dependencies array to be: [timeDeadline, today]",{"range":"125","text":"126"},{"range":"127","text":"126"},"Update the dependencies array to be: [editTodo]",{"range":"128","text":"129"},"Update the dependencies array to be: [dt, editTodo]",{"range":"130","text":"131"},[1380,1380],", [filterByStatus, todosList, status]",[955,955],", [todo.status]",[1127,1129],"[timeDeadline, today]",[1329,1331],[781,783],"[editTodo]",[1121,1131],"[dt, editTodo]"]